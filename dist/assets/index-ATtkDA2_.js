var w=Object.defineProperty;var y=(a,e,o)=>e in a?w(a,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):a[e]=o;var h=(a,e,o)=>y(a,typeof e!="symbol"?e+"":e,o);function O(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))t(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&t(s)}).observe(document,{childList:!0,subtree:!0});function o(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerPolicy&&(n.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?n.credentials="include":r.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function t(r){if(r.ep)return;r.ep=!0;const n=o(r);fetch(r.href,n)}})();const v=async()=>{if(!("serviceWorker"in navigator)){console.log("Service Worker not supported in the browser");return}try{const a=await navigator.serviceWorker.register("/sw.js");return console.log("Service worker registered with scope:",a.scope),a.waiting&&(console.log("New service worker waiting"),a.waiting.postMessage({type:"SKIP_WAITING"})),a.onupdatefound=()=>{const e=a.installing;e&&(e.onstatechange=()=>{if(e.state==="installed")if(navigator.serviceWorker.controller){console.log("New service worker installed, but will activate on next page load");const o=document.createElement("div");o.className="update-notification",o.innerHTML='\n                <p>Ada pembaruan tersedia untuk aplikasi ini.</p>\n                <button id="updateNowBtn">Perbarui Sekarang</button>\n              ',document.body.appendChild(o),document.getElementById("updateNowBtn").addEventListener("click",()=>{e.postMessage({type:"SKIP_WAITING"}),o.remove(),window.location.reload()})}else console.log("Service Worker installed for the first time")})},navigator.serviceWorker.addEventListener("controllerchange",()=>{console.log("New service worker activated, reloading for clean state")}),a}catch(a){console.error("Service worker registration failed:",a)}};class c{static async openDB(){return this.dbPromise||(this.dbPromise=new Promise((e,o)=>{console.log("Opening IndexedDB");const t=indexedDB.open("petabicara-db",1);t.onupgradeneeded=r=>{console.log("Upgrading IndexedDB");const n=r.target.result;n.objectStoreNames.contains("stories")||(console.log("Creating stories object store"),n.createObjectStore("stories",{keyPath:"id"})),n.objectStoreNames.contains("offlineQueue")||(console.log("Creating offlineQueue object store"),n.createObjectStore("offlineQueue",{keyPath:"id",autoIncrement:!0}))},t.onsuccess=()=>{console.log("IndexedDB opened successfully"),e(t.result)},t.onerror=()=>{console.error("Error opening IndexedDB",t.error),o(t.error)}})),this.dbPromise}static async saveStories(e){try{const t=(await this.openDB()).transaction("stories","readwrite"),r=t.objectStore("stories");return console.log("Saving ".concat(e.length," stories to IndexedDB")),e.forEach(n=>{r.put(n)}),new Promise((n,s)=>{t.oncomplete=()=>{console.log("Stories saved successfully"),n(!0)},t.onerror=()=>{console.error("Error saving stories",t.error),s(t.error)}})}catch(o){throw console.error("Failed to save stories to IndexedDB",o),o}}static async getStories(){try{const t=(await this.openDB()).transaction("stories","readonly").objectStore("stories");return new Promise((r,n)=>{const s=t.getAll();s.onsuccess=()=>{console.log("Retrieved ".concat(s.result.length," stories from IndexedDB")),r(s.result)},s.onerror=()=>{console.error("Error getting stories from IndexedDB",s.error),n(s.error)}})}catch(e){return console.error("Failed to get stories from IndexedDB",e),[]}}static async getStoryById(e){try{const r=(await this.openDB()).transaction("stories","readonly").objectStore("stories");return new Promise((n,s)=>{const l=r.get(e);l.onsuccess=()=>{n(l.result)},l.onerror=()=>{console.error("Error getting story by ID",l.error),s(l.error)}})}catch(o){return console.error("Failed to get story with ID ".concat(e," from IndexedDB"),o),null}}static async deleteStory(e){try{const t=(await this.openDB()).transaction("stories","readwrite"),r=t.objectStore("stories");return console.log("Deleting story with ID ".concat(e," from IndexedDB")),r.delete(e),new Promise((n,s)=>{t.oncomplete=()=>{console.log("Story ".concat(e," deleted successfully")),n(!0)},t.onerror=()=>{console.error("Error deleting story",t.error),s(t.error)}})}catch(o){throw console.error("Failed to delete story with ID ".concat(e," from IndexedDB"),o),o}}static async saveOfflineStory(e){try{const t=(await this.openDB()).transaction("offlineQueue","readwrite"),r=t.objectStore("offlineQueue"),n={id:"offline-".concat(Date.now()),type:"add-story",data:e,timestamp:new Date().getTime()};return console.log("Saving story to offline queue",n),r.add(n),new Promise((s,l)=>{t.oncomplete=()=>{console.log("Story saved to offline queue successfully"),s(n.id)},t.onerror=()=>{console.error("Error saving to offline queue",t.error),l(t.error)}})}catch(o){throw console.error("Failed to save to offline queue",o),o}}static async getOfflineQueue(){try{const t=(await this.openDB()).transaction("offlineQueue","readonly").objectStore("offlineQueue");return new Promise((r,n)=>{const s=t.getAll();s.onsuccess=()=>{console.log("Retrieved ".concat(s.result.length," items from offline queue")),r(s.result)},s.onerror=()=>{console.error("Error getting offline queue",s.error),n(s.error)}})}catch(e){return console.error("Failed to get offline queue",e),[]}}static async deleteFromOfflineQueue(e){try{const t=(await this.openDB()).transaction("offlineQueue","readwrite"),r=t.objectStore("offlineQueue");return console.log("Deleting item with ID ".concat(e," from offline queue")),r.delete(e),new Promise((n,s)=>{t.oncomplete=()=>{console.log("Offline queue item ".concat(e," deleted successfully")),n(!0)},t.onerror=()=>{console.error("Error deleting from offline queue",t.error),s(t.error)}})}catch(o){throw console.error("Failed to delete from offline queue",o),o}}static async clearOfflineQueue(){try{const o=(await this.openDB()).transaction("offlineQueue","readwrite"),t=o.objectStore("offlineQueue");return console.log("Clearing offline queue"),t.clear(),new Promise((r,n)=>{o.oncomplete=()=>{console.log("Offline queue cleared successfully"),r(!0)},o.onerror=()=>{console.error("Error clearing offline queue",o.error),n(o.error)}})}catch(e){throw console.error("Failed to clear offline queue",e),e}}}h(c,"dbPromise",null);class b{constructor(){this._isOnline=window.navigator.onLine,this._listeners=[],window.addEventListener("online",()=>{console.log("Network status: ONLINE"),this._isOnline=!0,this._notifyListeners()}),window.addEventListener("offline",()=>{console.log("Network status: OFFLINE"),this._isOnline=!1,this._notifyListeners()})}isOnline(){return this._isOnline}addListener(e){this._listeners.push(e)}removeListener(e){this._listeners=this._listeners.filter(o=>o!==e)}_notifyListeners(){this._listeners.forEach(e=>{try{e(this._isOnline)}catch(o){console.error("Error in network status listener:",o)}})}}const u=new b;class S{constructor(){this.baseUrl="https://story-api.dicoding.dev/v1",u.addListener(e=>{e&&(console.log("Back online! Syncing offline data..."),this.syncOfflineData())})}async register(e,o,t){try{if(!u.isOnline())throw new Error("Anda sedang offline. Silakan coba lagi saat online.");console.log("Registering user:",e,o);const n=await(await fetch("".concat(this.baseUrl,"/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:o,password:t})})).json();if(console.log("Register response:",n),n.error)throw new Error(n.message);return n}catch(r){throw console.error("Registration error:",r),new Error("Failed to register: ".concat(r.message))}}async login(e,o){try{if(!u.isOnline())throw new Error("Anda sedang offline. Silakan coba lagi saat online.");console.log("Login attempt for:",e);const r=await(await fetch("".concat(this.baseUrl,"/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:o})})).json();if(console.log("Login response:",r),r.error)throw new Error(r.message);return localStorage.setItem("token",r.loginResult.token),localStorage.setItem("user",JSON.stringify(r.loginResult)),this.registerPushNotification(),r}catch(t){throw console.error("Login error:",t),new Error("Failed to login: ".concat(t.message))}}async getAllStories(){try{const e=localStorage.getItem("token");if(console.log("Getting stories with token:",e?"Token exists":"No token"),!e)throw new Error("Token tidak ditemukan. Silakan login terlebih dahulu.");if(u.isOnline()){console.log("Online mode: fetching stories from API");const t=await(await fetch("".concat(this.baseUrl,"/stories?location=1"),{headers:{Authorization:"Bearer ".concat(e)}})).json();if(console.log("Stories response:",t),t.error)throw new Error(t.message);return await c.saveStories(t.listStory),t.listStory}else{console.log("Offline mode: retrieving stories from IndexedDB");const o=await c.getStories();return!o||o.length===0?console.log("No stories found in IndexedDB"):console.log("Found ".concat(o.length," stories in IndexedDB")),o||[]}}catch(e){return console.error("Error fetching stories:",e),e.message.includes("Token tidak ditemukan")&&window.router&&window.router.navigateTo("/masuk"),console.log("Trying to fetch from IndexedDB after error"),await c.getStories()||[]}}async addNewStory(e,o,t,r){try{const n=localStorage.getItem("token");if(console.log("Adding new story with token:",n?"Token exists":"No token"),!n)throw new Error("Token tidak ditemukan. Silakan login terlebih dahulu.");if(!u.isOnline()){console.log("Offline: storing story to IndexedDB for later sync");const i="offline-"+Date.now(),g=URL.createObjectURL(o),f=JSON.parse(localStorage.getItem("user"))||{},p={id:i,name:f.name||"Offline User",description:e,photoUrl:g,createdAt:new Date().toISOString(),lat:t,lon:r,isOffline:!0};return await c.saveOfflineStory({description:e,photoBlob:o,lat:t,lon:r,id:i}),await c.saveStories([p]),{error:!1,message:"Cerita disimpan untuk diunggah nanti saat online",story:p}}const s=new FormData;s.append("description",e),s.append("photo",o,"photo.jpg"),t!==null&&r!==null&&(s.append("lat",t),s.append("lon",r)),console.log("Sending request to add story");const d=await(await fetch("".concat(this.baseUrl,"/stories"),{method:"POST",headers:{Authorization:"Bearer ".concat(n)},body:s})).json();if(console.log("Add story response:",d),d.error)throw new Error(d.message);return this.getAllStories(),d}catch(n){throw console.error("Error adding story:",n),new Error("Failed to add story: ".concat(n.message))}}async syncOfflineData(){console.log("Syncing offline data...");try{const e=localStorage.getItem("token");if(!e){console.log("No token available, skipping sync");return}const o=await c.getOfflineQueue();if(console.log("Offline queue:",o),!o||o.length===0){console.log("No offline data to sync");return}for(const t of o)if(t.type==="add-story"){console.log("Syncing offline story:",t);try{const{description:r,photoBlob:n,lat:s,lon:l,id:d}=t.data,i=new FormData;i.append("description",r),i.append("photo",n,"photo.jpg"),s!==null&&l!==null&&(i.append("lat",s),i.append("lon",l)),console.log("Sending offline story to API");const f=await(await fetch("".concat(this.baseUrl,"/stories"),{method:"POST",headers:{Authorization:"Bearer ".concat(e)},body:i})).json();if(console.log("Add story response for offline item:",f),f.error){console.error("Error syncing offline story:",f.message);continue}await c.deleteStory(d),await c.deleteFromOfflineQueue(t.id),console.log("Offline story synced successfully")}catch(r){console.error("Failed to sync offline story:",r)}}await this.getAllStories()}catch(e){console.error("Error syncing offline data:",e)}}async registerPushNotification(){try{if(console.log("Checking push notification support..."),!("PushManager"in window))return console.log("Push notifications not supported in this browser"),!1;if(!navigator.serviceWorker.controller)return console.log("Service worker not yet controlling the page"),!1;if(console.log("Requesting notification permission..."),await Notification.requestPermission()!=="granted")return console.log("Notification permission denied"),!1;console.log("Notification permission granted, getting VAPID key...");const o=localStorage.getItem("token");if(!o)return console.log("No token available, cannot register for notifications"),!1;const r=await(await fetch("".concat(this.baseUrl,"/notification"),{headers:{Authorization:"Bearer ".concat(o)}})).json();if(r.error)return console.error("Error getting VAPID key:",r.message),!1;const n=r.data.publicKey;console.log("Got VAPID key, subscribing to push service...");const s=this._urlBase64ToUint8Array(n),l=await navigator.serviceWorker.ready;if(await l.pushManager.getSubscription())return console.log("Already subscribed to push service"),!0;console.log("Creating new push subscription...");const i=await l.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:s});console.log("Push subscription created:",i),console.log("Sending subscription to server...");const g=btoa(String.fromCharCode.apply(null,new Uint8Array(i.getKey("p256dh")))),f=btoa(String.fromCharCode.apply(null,new Uint8Array(i.getKey("auth")))),m=await(await fetch("".concat(this.baseUrl,"/subscribe"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(o)},body:JSON.stringify({endpoint:i.endpoint,keys:{p256dh:g,auth:f}})})).json();return m.error?(console.error("Push subscription registration error:",m.message),!1):(console.log("Push notification subscription successful"),!0)}catch(e){return console.error("Push notification registration error:",e),!1}}_urlBase64ToUint8Array(e){const o="=".repeat((4-e.length%4)%4),t=(e+o).replace(/-/g,"+").replace(/_/g,"/"),r=window.atob(t),n=new Uint8Array(r.length);for(let s=0;s<r.length;++s)n[s]=r.charCodeAt(s);return n}}new S;class k{constructor(){this._element=null,this._init()}_init(){this._element=document.createElement("div"),this._element.className="offline-indicator",this._element.setAttribute("aria-live","polite"),document.body.appendChild(this._element),this._updateStatus(u.isOnline()),u.addListener(e=>{this._updateStatus(e)})}_updateStatus(e){if(e){this._element.classList.remove("visible"),this._element.innerHTML="";const o=document.createElement("div");o.className="online-msg",o.textContent="Kembali online",document.body.appendChild(o),setTimeout(()=>{o.classList.add("fade-out"),setTimeout(()=>{o.parentNode&&o.parentNode.removeChild(o)},500)},3e3)}else this._element.classList.add("visible"),this._element.innerHTML='\n        <div class="offline-content">\n          <i class="fas fa-wifi" aria-hidden="true"></i>\n          <span>Anda sedang offline. Beberapa fitur mungkin terbatas.</span>\n        </div>\n      '}}new k;document.addEventListener("DOMContentLoaded",()=>{const a={async init(){console.log("App initializing..."),await v(),console.log("Offline indicator initialized");try{await c.openDB(),console.log("IndexedDB initialized")}catch(i){console.error("Failed to initialize IndexedDB:",i)}const e=new StoryModel(apiService),o=apiService,t=new AppView,r=new HomeView,n=new AddStoryView,s=new LoginView,l=new RegisterView;console.log("Views created");const d=new AppPresenter({view:t,storyModel:e,authModel:o,router});new HomePresenter({view:r,model:e}),new AddStoryPresenter({view:n,model:e}),console.log("Creating login presenter..."),new LoginPresenter({view:s,apiService,router}),console.log("Creating register presenter..."),new RegisterPresenter({view:l,apiService,router}),console.log("Presenters initialized"),window.addEventListener("hashchange",()=>{console.log("Page navigation detected, checking if camera needs to be stopped"),cameraHelper&&cameraHelper.stream&&(console.log("Active camera stream detected during navigation, stopping it"),cameraHelper.stopCamera())}),router.addRoute("/",()=>{console.log("Navigating to home page"),document.querySelector("#mainContent").innerHTML="";const i=new HomeView;new HomePresenter({view:i,model:e}).init(),i.render()},{requiresAuth:!0}).addRoute("/tambah",()=>{console.log("Navigating to add story page"),document.querySelector("#mainContent").innerHTML="";const i=new AddStoryView;i.render(),new AddStoryPresenter({view:i,model:e}).init()},{requiresAuth:!0}).addRoute("/peta",()=>{console.log("Navigating to map page"),cameraHelper&&cameraHelper.stream&&(console.log("Active camera stream detected, stopping it"),cameraHelper.stopCamera()),document.querySelector("#mainContent").innerHTML="";const i=new MapView;i.render(),new MapPresenter({view:i,model:e}).init()},{requiresAuth:!0}).addRoute("/masuk",()=>{console.log("Rendering login page"),document.querySelector("#mainContent").innerHTML="",s.render()},{guestOnly:!0}).addRoute("/daftar",()=>{console.log("Rendering register page"),document.querySelector("#mainContent").innerHTML="",l.render()},{guestOnly:!0}).setFallback(()=>{console.error("Halaman tidak ditemukan"),document.querySelector("#mainContent").innerHTML="",new NotFoundView().render()}),console.log("Routes configured"),router.init(),this._setupSkipLink(),this._setupNavigation(),this._setupNavClicks(),d.start(),this._addViewTransitionStyles(),u.isOnline()&&(console.log("Online at startup, checking for offline data to sync"),setTimeout(()=>{e.syncOfflineStories()},2e3)),console.log("App initialization complete")},_setupSkipLink(){const e=document.querySelector("#mainContent"),o=document.querySelector(".skip-link");e&&o&&o.addEventListener("click",function(t){t.preventDefault(),o.blur(),e.focus(),e.scrollIntoView()})},_setupNavigation(){const e=document.getElementById("navToggle"),o=document.querySelector(".nav-menu");e&&o&&e.addEventListener("click",()=>{const t=e.getAttribute("aria-expanded")==="true";e.setAttribute("aria-expanded",!t),o.classList.toggle("active")}),this._updateAuthNavItem(),document.addEventListener("authChanged",()=>{console.log("Auth status changed"),this._updateAuthNavItem()})},_setupNavClicks(){document.querySelectorAll("nav a").forEach(e=>{e.addEventListener("click",o=>{const t=e.getAttribute("href");t.startsWith("#")&&(o.preventDefault(),console.log("Navigation link clicked:",t),router.navigateTo(t.substring(1)))})})},_updateAuthNavItem(){const e=document.getElementById("authNavItem");if(e){const o=localStorage.getItem("token")!==null;if(console.log("Updating auth nav item, isLoggedIn:",o),o){e.innerHTML='<a href="#" id="logoutBtn"><i class="fas fa-sign-out-alt" aria-hidden="true"></i> Keluar</a>';const t=document.getElementById("logoutBtn");t&&t.addEventListener("click",r=>{r.preventDefault(),console.log("Logout clicked"),localStorage.removeItem("token"),localStorage.removeItem("userId"),localStorage.removeItem("name"),router.navigateTo("/masuk"),document.dispatchEvent(new Event("authChanged"))})}else e.innerHTML='<a href="#/masuk"><i class="fas fa-sign-in-alt" aria-hidden="true"></i> Masuk</a>'}},_addViewTransitionStyles(){if(!document.getElementById("viewTransitionStyles")){const e=document.createElement("style");e.id="viewTransitionStyles",e.textContent="\n          /* Basic transitions for all browsers */\n          #mainContent {\n            transition: opacity 0.3s ease;\n          }\n          \n          /* View Transitions API specific styles */\n          @supports (view-transition: same) {\n            ::view-transition-old(root) {\n              animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;\n            }\n            \n            ::view-transition-new(root) {\n              animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-in;\n            }\n            \n            @keyframes fade-in {\n              from { opacity: 0; }\n              to { opacity: 1; }\n            }\n            \n            @keyframes fade-out {\n              from { opacity: 1; }\n              to { opacity: 0; }\n            }\n          }\n        ",document.head.appendChild(e)}}};console.log("Starting app..."),a.init()});export{O as __vite_legacy_guard};
